{
  "openapi": "3.0.3",
  "info": {
    "title": "GEMA Realtime API",
    "version": "1.0.0",
    "description": "Realtime collaboration, notifications, and discussions for the GEMA LMS v2 clients. The specification covers WebSocket chat, server-sent events, and threaded discussions."
  },
  "servers": [
    {
      "url": "https://api.gema.dev",
      "description": "Production"
    },
    {
      "url": "https://staging.api.gema.dev",
      "description": "Staging"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/v2/chat/ws": {
      "get": {
        "summary": "Open a chat WebSocket",
        "description": "Upgrades the HTTP connection to a WebSocket for room based collaboration. Clients must include a JWT bearer token and provide the target `room_id`. Messages are encoded as JSON using the `ChatMessage` schema.",
        "tags": [
          "Chat"
        ],
        "parameters": [
          {
            "name": "room_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 3,
              "maxLength": 128
            }
          }
        ],
        "responses": {
          "101": {
            "description": "Switching Protocols (WebSocket)"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/api/v2/chat/history": {
      "get": {
        "summary": "List chat history",
        "tags": [
          "Chat"
        ],
        "parameters": [
          {
            "name": "room_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 3,
              "maxLength": 128
            }
          },
          {
            "name": "before",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chat history",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatHistoryEnvelope"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/api/v2/notifications": {
      "get": {
        "summary": "List notifications",
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationListEnvelope"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/api/v2/notifications/stream": {
      "get": {
        "summary": "Stream notifications via SSE",
        "description": "Streams notification events for the authenticated user using server-sent events. Each event carries the `Notification` payload in the data field. Keep-alive comments are emitted every 15 seconds to retain proxies.",
        "tags": [
          "Notifications"
        ],
        "responses": {
          "200": {
            "description": "Event stream",
            "content": {
              "text/event-stream": {
                "examples": {
                  "notification": {
                    "$ref": "#/components/examples/NotificationSSE"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/api/v2/notifications/{id}/read": {
      "patch": {
        "summary": "Mark notification as read",
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationEnvelope"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/api/v2/discussion/threads": {
      "get": {
        "summary": "List discussion threads",
        "tags": [
          "Discussion"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Threads",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionThreadListEnvelope"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "summary": "Create a thread",
        "tags": [
          "Discussion"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscussionThreadCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Thread created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionThreadEnvelope"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/api/v2/discussion/threads/{id}": {
      "get": {
        "summary": "Get thread by ID",
        "tags": [
          "Discussion"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "include_replies",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thread",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionThreadEnvelope"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "summary": "Update a thread",
        "tags": [
          "Discussion"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscussionThreadUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Thread updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionThreadEnvelope"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "summary": "Delete a thread",
        "tags": [
          "Discussion"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/api/v2/discussion/replies": {
      "get": {
        "summary": "List replies for a thread",
        "tags": [
          "Discussion"
        ],
        "parameters": [
          {
            "name": "thread_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Replies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionReplyListEnvelope"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "summary": "Create a reply",
        "tags": [
          "Discussion"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscussionReplyCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Reply created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscussionReplyEnvelope"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorEnvelope"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorEnvelope"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorEnvelope"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorEnvelope"
            }
          }
        }
      },
      "Success": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SuccessEnvelope"
            }
          }
        }
      }
    },
    "schemas": {
      "SuccessEnvelope": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "success"
          },
          "data": {
            "nullable": true
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "ErrorEnvelope": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "message": {
            "type": "string",
            "example": "invalid payload"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "ChatMessage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "room_id": {
            "type": "string"
          },
          "sender_id": {
            "type": "string"
          },
          "receiver_id": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "text",
              "image",
              "file",
              "system"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "room_id",
          "sender_id",
          "content",
          "type",
          "created_at"
        ]
      },
      "ChatHistoryEnvelope": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessEnvelope"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ChatMessage"
                }
              }
            }
          }
        ]
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "user_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "read": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "user_id",
          "type",
          "message",
          "read",
          "created_at",
          "updated_at"
        ]
      },
      "NotificationListEnvelope": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessEnvelope"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Notification"
                }
              },
              "message": {
                "type": "string",
                "example": "notifications"
              }
            }
          }
        ]
      },
      "NotificationEnvelope": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessEnvelope"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/Notification"
              },
              "message": {
                "type": "string",
                "example": "notification updated"
              }
            }
          }
        ]
      },
      "DiscussionThread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "title": {
            "type": "string"
          },
          "author_id": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "replies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscussionReply"
            }
          }
        },
        "required": [
          "id",
          "title",
          "author_id",
          "created_at",
          "updated_at"
        ]
      },
      "DiscussionThreadListEnvelope": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessEnvelope"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DiscussionThread"
                }
              },
              "message": {
                "type": "string",
                "example": "threads"
              }
            }
          }
        ]
      },
      "DiscussionThreadEnvelope": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessEnvelope"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/DiscussionThread"
              }
            }
          }
        ]
      },
      "DiscussionThreadCreateRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255
          }
        },
        "required": [
          "title"
        ]
      },
      "DiscussionThreadUpdateRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255
          }
        }
      },
      "DiscussionReply": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "thread_id": {
            "type": "integer",
            "format": "int64"
          },
          "author_id": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "thread_id",
          "author_id",
          "content",
          "created_at",
          "updated_at"
        ]
      },
      "DiscussionReplyListEnvelope": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessEnvelope"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DiscussionReply"
                }
              },
              "message": {
                "type": "string",
                "example": "replies"
              }
            }
          }
        ]
      },
      "DiscussionReplyEnvelope": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessEnvelope"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "$ref": "#/components/schemas/DiscussionReply"
              },
              "message": {
                "type": "string",
                "example": "reply created"
              }
            }
          }
        ]
      },
      "DiscussionReplyCreateRequest": {
        "type": "object",
        "properties": {
          "thread_id": {
            "type": "integer",
            "minimum": 1
          },
          "content": {
            "type": "string",
            "minLength": 1,
            "maxLength": 5000
          }
        },
        "required": [
          "thread_id",
          "content"
        ]
      }
    },
    "examples": {
      "NotificationSSE": {
        "summary": "Notification event",
        "value": "event: notification\ndata: {\"id\":42,\"user_id\":\"123\",\"type\":\"assignment\",\"message\":\"Assignment graded\",\"read\":false,\"created_at\":\"2025-10-23T12:34:56Z\",\"updated_at\":\"2025-10-23T12:34:56Z\"}\n\n"
      }
    }
  }
}
